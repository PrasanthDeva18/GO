structs

it is an group related together in one single value

define a struct type

example
type User struct {
	firstname string
	lastname string
}


struct pointers

methods in structs

//function declaration
func (paraname structname as type ) outPutUser {


}

(paraname structname as type ) // reciever arguments

// func call
appUser.outPutUser()

| Type                 | Syntax      | Meaning                         | When to Use                                        |
| -------------------- | ----------- | ------------------------------- | -------------------------------------------------- |
| **Value Receiver**   | `(u User)`  | Works on a *copy* of the struct | When you don‚Äôt need to modify the original data    |
| **Pointer Receiver** | `(u *User)` | Works on the *original* struct  | When you want to modify the data inside the method |


| Purpose                                   | Explanation                                                                   |
| ----------------------------------------- | ----------------------------------------------------------------------------- |
| üß± **Attach behavior to types**           | Methods define *what actions* your struct can perform.                        |
| üîÑ **Encapsulate logic**                  | Keeps related data (struct fields) and logic (methods) together.              |
| üßç **Make the code readable & organized** | Instead of passing the same struct around, methods use the receiver directly. |
| ‚öôÔ∏è **Support interfaces**                 | Go interfaces are built entirely on methods ‚Äî receivers make that possible.   |
| ‚úèÔ∏è **Modify or read struct data easily**  | Pointer receivers can mutate the actual struct values.                        |





Export in Go


package somewhere

type User struct {
	Firstname name
}


package main

var appUser User.user;

appUser = User.user {
	Firstname : "prasanth"
}

struct embedding is the concept of write the nested struct like classes inheritance



